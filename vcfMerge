#!/usr/bin/env python

import logging, sys, optparse, re
from collections import defaultdict
from os.path import join, basename, dirname, isfile
import string

# === COMMAND LINE INTERFACE, OPTIONS AND HELP ===
parser = optparse.OptionParser("usage: %prog [options] filename - merge all rows in a VCF file that describe the same variant into one single row and add a AC info field with the total number of merged rows")

parser.add_option("-d", "--debug", dest="debug", action="store_true", help="show debug messages")
parser.add_option("-i", "--indels", dest="indels", action="store_true", help="keep only indels")
parser.add_option("-s", "--snps", dest="snps", action="store_true", help="keep only snps")
#parser.add_option("-f", "--file", dest="file", action="store", help="run on file") 
#parser.add_option("", "--test", dest="test", action="store_true", help="do something") 
(options, args) = parser.parse_args()

if options.debug:
    logging.basicConfig(level=logging.DEBUG)
else:
    logging.basicConfig(level=logging.INFO)
# ==== FUNCTIONs =====
    
# ----------- MAIN --------------
if args==[]:
    parser.print_help()
    exit(1)

filename = args[0]
fieldNames = []
fieldDescs = []
data = defaultdict(list)
for line in open(filename):
    if line.startswith("##INFO="):
        fieldDescs.append(line.split('"')[-2])
        fieldNames.append(line.split("=")[2].split(",")[0])
    elif line.startswith("#CHROM"):
        # no special chars in description, no spaces
        fieldDescs = [re.sub('[^_a-zA-Z0-9-]', '_', x) for x in fieldDescs]
        descs = []
        # truncate descriptions to 80 chars
        for fd in fieldDescs:
            if len(fd)>80:
                fd = fd[:80]+"..."
            descs.append(fd)
        fieldDescs = descs
        print """##INFO=<ID=Desc,Number=1,Type=String,Description="Variant Description; Format: %s">""" % "|".join(fieldDescs)
        #print """##INFO=<ID=Desc,Number=1,Type=String,Description="%s">""" % "|".join(fieldDescs)
        print line,
    elif line.startswith("#"):
        print line,
    else:
        fs = line.rstrip("\n").split("\t")
        if len(fs)<4:
            logging.debug("Only %d fields in line %s" % (len(fs), line))
            assert(False)
        key = (fs[0], fs[1], fs[3], fs[4])
        data[key].append(fs)

newRows = []
for key, rows in data.iteritems():
    chrom, pos, ref, alt = key
    #print key, rows
    #idStr = "|".join([row[2] for row in rows])
    idStr = "|".join([row[2] for row in rows])[:15]+"..."
    infoParts = []
    for row in rows:
        # parse the old info field
        infoData = {}
        for fieldStr in row[-1].split(";"):
            fieldNameVal = string.split(fieldStr, "=", 1)
            if len(fieldNameVal)!=2:
                logging.debug("not two fields sep with =: %s" % fieldNameVal)
                logging.debug("line: %s" % row)
                #assert(False)
                continue
            fieldName, val = fieldNameVal
            infoData[fieldName] = val

        descFields = []
        for fn in fieldNames:
            descFields.append(infoData.get(fn, ""))

        descFields = [d.replace("|", "_").strip('"').lstrip("-").replace(":","=") for d in descFields]
        infoParts.append("|".join(descFields))
    infoParts = [i.replace(",", ".").replace('"', "").replace(";",".").replace(":"," ") for i in infoParts]
    newInfo = 'AC=%d;Desc=%s' % (len(infoParts), ",".join(infoParts))
    #newInfo = newInfo.replace(">", "&gt;")
    newRow = (chrom, pos, idStr, ref, alt, ".", ".", newInfo)
    if options.indels or options.snps:
        if options.indels and len(ref)==len(alt)==1:
            continue
        if options.snps and len(ref)!=1 or len(alt)!=1:
            continue
    newRows.append(newRow)

newRows.sort()
for row in newRows:
    print "\t".join(row)

