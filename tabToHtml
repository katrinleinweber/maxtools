#!/usr/bin/env python

import logging, sys, optparse, glob
from collections import defaultdict
from os.path import join, basename, dirname, isfile, isdir

# === COMMAND LINE INTERFACE, OPTIONS AND HELP ===
parser = optparse.OptionParser("usage: %prog [options] filename1 filename2 ... - convert tab table to html file. if filename1 is a directory, will process all .tab file in it, and write to files in filename2, which has to be an existing directory") 

parser.add_option("-d", "--debug", dest="debug", action="store_true", help="show debug messages") 
#parser.add_option("-f", "--file", dest="file", action="store", help="run on file") 
#parser.add_option("", "--test", dest="test", action="store_true", help="do something") 
(options, args) = parser.parse_args()

if options.debug:
    logging.basicConfig(level=logging.DEBUG)
else:
    logging.basicConfig(level=logging.INFO)
# ==== FUNCTIONs =====
    
# ----------- MAIN --------------
if args==[]:
    parser.print_help()
    exit(1)

filenames = args

outDir = None

if isdir(filenames[0]):
    filenames = glob.glob(join(filenames[0], "*.tab"))
    outDir = args[1]

ofh = sys.stdout
for filename in filenames:
    logging.info(filename)
    if outDir!=None:
        ofh = open(join(outDir, basename(filename).split(".")[0])+".html", "w")
    ofh.write("<table>")
    for line in open(filename):
        fields = line.rstrip("\n").split("\t")
        if line.startswith("#"):
            rowTag = "th"
        else:
            rowTag = "tr"
        ofh.write("<%s>" % rowTag)
        for f in fields:
            ofh.write("<td>%s</td>" % f)
        ofh.write( "</%s>" % rowTag)
    ofh.write("</table>")


