#!/usr/bin/python

from sys import *
from optparse import OptionParser
import Fasta
from os.path import basename

# === COMMAND LINE INTERFACE, OPTIONS AND HELP ===
parser = OptionParser("%prog [options] fastafile maf-file : Convert fasta-alignments to maf") 

parser.add_option("-t", "--type", dest="type", action="store", help='how to parse fasta headers to get positions, possible types: ucsc (">ci range=chr1:1-1000 revComp=True"), simple (">ci chr1 1 1000 +), slagan ("C. intestinalis 1.0 Scaffold_255:130-5504 (+)"), colon ("chr8:48081579-48083178")', metavar="TYPE", default="ucsc", type="string") 
parser.add_option("-d", "--databases", dest="databases", action="store", help='comma-separated list (no spaces!) of genome assemblies or species names, e.g. "ci1,cs1", one for every line in every alignment', metavar="LIST", default="UndefDB1,UndefDB2", type="string") 
parser.add_option("-s", "--sizeFiles", dest="sizeFiles", action="store", help='comma-separated list (no spaces!) of files that contain sizes of chromosomes, "undef" if you do not have a file for the respective species', metavar="LIST", default="undef,undef", type="string") 
parser.add_option("", "--oneDb", dest="oneDb", action="store", help='assume that all sequences are from the same genome, this will lead to an invalid .maf file with identical db entries', type="string") 
parser.add_option("", "--html", dest="html", action="store_true", help='output as html instead of maf') 

# ==== FUNCTIONs =====
def errorAbort(text):
    stderr.write(text + "\n")
    exit(1)
    
# PARSERS FOR FASTA-HEADERS TO GENOME POSITION 

# style: >ci chr1 1000 1080 +
def idToPosSimple(faId):
    fs = faId.split()
    return fs[1], int(fs[2]), int(fs[3]), fs[4]

# chr8:48081579-48083178
def idToPosColon(faId):
    chrom, posStr = faId.split(":")
    start, end = posStr.split("-")
    return chrom, int(start), int(end), "+"

# >C. intestinalis 1.0 Scaffold_255:130-5504 (+)
def idToPosSlagan1(faId):
    fs = faId.split()
    pos = fs[-2]
    chrom = pos.split(":")[0]
    fromto = pos.split(":")[1]
    start = fromto.split("-")[0]
    end = fromto.split("-")[1]
    strand = fs[-1][1]
    return chrom, int(start), int(end), strand


# style: >ci range=chr1:1000-1012 revComp=TRUE
def idToPosUcsc(faId):
    fs = faId.split()
    for f in fs:
        if f.startswith("range"):
            fs2 = f.split("=")[1]
            fs3 = fs2.split(":")
            fs4 = fs3[1].split("-")
        if f.lower().startswith("revcomp"):
            fs2 = f.split("=")
            strand = "x"
            if fs2[1].lower()=="true":
                strand="-"
            else:
                strand="+"
            return fs3[0], int(fs4[0]), int(fs4[1]), strand
    return fs3[0], int(fs4[0]), int(fs4[1]), "unknown"

def faToMaf(infile, sizefiles, outfile, type, genomes, options):
    # set conversion function
    type = type.lower()
    if type=="ucsc":
        convFunc = idToPosUcsc
    elif type=="simple":
        convFunc = idToPosSimple
    elif type=="slagan":
        convFunc = idToPosSlagan1
    elif type=="colon":
        convFunc = idToPosColon
    else:
        errorAbort("illegal type")

    # slurp sizefiles
    allSizes = []
    for sizefile in sizefiles:
        sizes = {}
        if sizefile!="undef":
            for l in open(sizefile, "r"):
                chrom, size = l.split()
                sizes[chrom] = int(size)
        allSizes.append(sizes)

    if infile=="stdin":
        ifh = stdin
    else:
        ifh = open(infile, "r")
    lastline = ifh.readline()

    if outfile!="stdout":
        of = open(outfile, "w")
    else:
        of = stdout
    
    if options.html:
        of.write("<html><body><pre>\n")
    else:
        of.write("##maf version=1\n")

    #of.write("# maf2fasta -t %s -g %s\n" % (type, genomes))
    maxAln = len(genomes)
    if options.oneDb:
        maxAln=999999999

    # convert
    while lastline!="":
      i = 0

      if options.html:
          of.write("<h2>%s</h2>" % basename(infile).split(".")[0])
      else:
          of.write("a score=0\n")
      lastline, aln = Fasta.parseFastaUntil(ifh, maxAln, lastline)
      for seq in aln:
          chrom, start, end, strand = convFunc(seq.fullid)
          if (not end > start) and i == 0:
              print chrom, start, end, strand
              errorAbort("illegal coordinates - end is not > start!")
          if len(allSizes[0])==0:
            size = 123456789
          elif chrom=="consensus":
            size = end-start
          else:
            size = allSizes[i].get(chrom, 123456789)

          if options.oneDb:
            genome  = chrom
          else:
            genome = genomes[i % len(genomes)] + "." + chrom
          
          if options.html:
              posStr = "%s:%d-%d (%s)" % (genome,start,end,strand)
              if genome=="consensus":
                  of.write("<b>%35s %s</b>\n" % (posStr, seq.nucl))
              else:
                  of.write("%30s %s\n" % (posStr, seq.nucl))
          else:
              of.write("s %14s %10s %7s %13s %10s %s\n" % (genome, start, int(end)-int(start), strand, size, seq.nucl ))

          if not options.oneDb:
              i += 1 
      of.write("\n")
      of.write("</body></html>\n")

# ----------- MAIN --------------

(options, args) = parser.parse_args()
if len(args)!=2: 
    parser.print_help()
    exit(1)

infile, outfile = args
faToMaf(infile, options.sizeFiles.split(","), outfile, options.type, options.databases.split(','), options)
