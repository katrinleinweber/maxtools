#!/usr/bin/env python

from sys import *
from optparse import OptionParser

import tabfile, maxbio, logging
logger = logging.getLogger("fastaFilterId")

# === COMMAND LINE INTERFACE, OPTIONS AND HELP ===
parser = OptionParser("usage: %prog [options] fastafile idfile - only display sequences with an id (splitting on ' ' or '|') from idfile") 

#parser.add_option("-l", "--wordlength", dest="motiflength", action="store", help="length of word [default: %default, hexamers]", type="int", metavar="NUMBER", default="6") 
#parser.add_option("-m", "--maf", dest="maf", action="store_true", help="force maf format [default: %default]", default=True) 
parser.add_option("-v", "--invert", dest="invert", action="store_true", help="invert selection: only display NON-matching sequences", default=False) 
parser.add_option("-d", "--debug", dest="debug", action="store_true", help="debug", default=False) 
parser.add_option("-f", "--pipeField", dest="pipeField", action="store", type="int", help="split the field by | and compare only a given field, 0-based counting (unlike unix cut)") 
(options, args) = parser.parse_args()

# ==== FUNCTIONs =====

# ----------- MAIN --------------
if args==[]: 
    parser.print_help()
    exit(1)

fastafname, idfname = args
invert = options.invert

if options.debug:
    logging.basicConfig(level=logging.DEBUG)
else:
    logging.basicConfig(level=logging.INFO)

logging.info("Reading %s" % idfname)
filterids = set(tabfile.slurplist(idfname, field=0))

logging.info("Filtering")
for seqid, seq in maxbio.FastaReader(fastafname).parse():
    idstem = seqid.split(" ")[0]
    if options.pipeField!=None:
        idstem = idstem.split("|")[options.pipeField]
    logger.debug("checking %s" % idstem)
    if (not invert and idstem in filterids) or (invert and idstem not in filterids):
        logger.debug("printing %s" % idstem)
        #print ">"+seqid
        print ">"+idstem
        print seq
    else:
        logger.debug("filtering out %s" % idstem)
