#!/usr/bin/python

from sys import *
from optparse import OptionParser
import tabfile, Fasta, iupacSearch
from os.path import isfile

# === COMMAND LINE INTERFACE, OPTIONS AND HELP ===
parser = OptionParser("""usage: %prog [options] motifFileOrMotif fafile fafile fafile... - scan fasta files for matches to motifs. If file does not exist, motifFileOrMotif is assumed to be a motif directly.

matches are non-overlapping.
motifFile is one motif per line
output will go to stdout and is in bed format
""") 

#parser.add_option("-l", "--wordlength", dest="motiflength", action="store", help="length of word [default: %default, hexamers]", type="int", metavar="NUMBER", default="6") 
#parser.add_option("-m", "--maf", dest="maf", action="store_true", help="force maf format [default: %default]", default=True) 
#parser.add_option("-f", "--fasta", dest="maf", action="store_false", help="force fasta format (if not specified, we assume UCSC .maf file format") 
parser.add_option("-s", "--seq", dest="seq", action="store_true", help="show sequence of match, not the motif name") 
parser.add_option("-c", "--case", dest="keepCase", action="store_true", help="do not ignore case when matching", default=False)
(options, args) = parser.parse_args()

# ==== FUNCTIONs =====
    
# ----------- MAIN --------------
if args==[]: 
    parser.print_help()
    exit(1)

motifFile = args[0]
files = args[1:]

if isfile(motifFile):
    motifs = tabfile.slurpdict(motifFile, doNotCheckLen=True)
else:
    motifs = {motifFile:motifFile}

#print options.keepCase, motifs
motReList, motReStr, motDesc = iupacSearch.compileMotifs(motifs, ignoreCase=(not options.keepCase))
#print motReList[0][2].pattern

for f in files:
    faSeqs = Fasta.readFastaAsList(f)
    for faSeq in faSeqs:
        matches = iupacSearch.scan(faSeq.nucl, motReList)
        for motif, posList in matches.iteritems():
            motiflen = len(motif)
            for pos, strand in posList:
                name = motif
                if options.seq:
                    name = faSeq.nucl[pos:pos+motiflen]
                fs = [ faSeq.id, str(pos), str(pos+motiflen), name, "0", strand ]
                print "\t".join(fs)


